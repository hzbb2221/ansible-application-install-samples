---
- name: 系统信息检查Playbook
  hosts: all
  become: yes
  vars:
    report_path: "/tmp/system_report.log"
  
  tasks:
    - name: 清理旧报告文件
      ansible.builtin.file:
        path: "{{ report_path }}"
        state: absent

    - block:  # 收集基础系统信息
        - name: 收集系统基本信息
          ansible.builtin.setup:
            filter: 
              - "ansible_distribution*"
              - "ansible_kernel"
              - "ansible_hostname"
              - "ansible_selinux"
              - "ansible_userspace_*"
              - "ansible_date_time"
          register: sys_info
          tags: system

        - name: 格式化系统信息
          ansible.builtin.template:
            src: system_info.j2
            dest: "{{ report_path }}"
          tags: system

      when: "'system' in tags or 'all' in tags"

    - block:  # 收集CPU信息
        - name: 获取CPU信息
          ansible.builtin.shell:
            cmd: |
              Physical_CPUs=$(grep "physical id" /proc/cpuinfo | sort | uniq | wc -l)
              Virt_CPUs=$(grep "processor" /proc/cpuinfo | wc -l)
              CPU_Kernels=$(grep "cores" /proc/cpuinfo | uniq | awk -F ': ' '{print $2}')
              CPU_Type=$(grep "model name" /proc/cpuinfo | awk -F ': ' '{print $2}' | sort | uniq)
              echo "Physical_CPUs=${Physical_CPUs};Virt_CPUs=${Virt_CPUs};CPU_Kernels=${CPU_Kernels};CPU_Type='${CPU_Type}'"
          register: cpu_raw
          changed_when: false

        - name: 格式化CPU信息
          ansible.builtin.lineinfile:
            path: "{{ report_path }}"
            line: |
              【CPU信息】
              物理CPU个数: {{ cpu_raw.stdout_lines[0] | regex_replace('.*Physical_CPUs=([^;]+).*', '\\1') }}
              逻辑CPU个数: {{ cpu_raw.stdout_lines[0] | regex_replace('.*Virt_CPUs=([^;]+).*', '\\1') }}
              每CPU核心数: {{ cpu_raw.stdout_lines[0] | regex_replace('.*CPU_Kernels=([^;]+).*', '\\1') }}
              CPU型号: {{ cpu_raw.stdout_lines[0] | regex_replace('.*CPU_Type=(.+)$', '\\1') | replace("'", "") }}
              {{ '#'*80 }}
            create: yes
          tags: cpu

      when: "'cpu' in tags or 'all' in tags"

    - block:  # 收集内存信息
        - name: 获取内存信息
          ansible.builtin.shell:
            cmd: |
              free -m | awk '/Mem/{printf "%.2f", $3/$2 * 100}'
          register: mem_usage
          changed_when: false

        - name: 格式化内存信息
          ansible.builtin.lineinfile:
            path: "{{ report_path }}"
            line: |
              【内存信息】
              总内存: {{ ansible_memtotal_mb }} MB
              已用内存: {{ ansible_memtotal_mb - ansible_memfree_mb }} MB
              内存使用率: {{ mem_usage.stdout }}%
              {{ '#'*80 }}
            create: yes
          tags: memory

      when: "'memory' in tags or 'all' in tags"

    - block:  # 收集磁盘信息
        - name: 获取磁盘信息
          ansible.builtin.shell:
            cmd: df -hTP --exclude-type=tmpfs
          register: disk_info
          changed_when: false

        - name: 格式化磁盘信息
          ansible.builtin.lineinfile:
            path: "{{ report_path }}"
            line: |
              【磁盘信息】
              {{ disk_info.stdout }}
              {{ '#'*80 }}
            create: yes
          tags: disk

      when: "'disk' in tags or 'all' in tags"

    - block:  # 收集网络信息
        - name: 获取公网IP
          ansible.builtin.uri:
            url: https://api.ipify.org
            return_content: yes
          register: public_ip
          ignore_errors: yes

        - name: 收集网络配置
          ansible.builtin.lineinfile:
            path: "{{ report_path }}"
            line: |
              【网络信息】
              公网IP: {{ public_ip.content | default('N/A') }}
              私网IP: {{ ansible_default_ipv4.address }}
              网关: {{ ansible_default_ipv4.gateway }}
              MAC地址: {{ ansible_default_ipv4.macaddress }}
              {{ '#'*80 }}
            create: yes
          tags: network

      when: "'network' in tags or 'all' in tags"

    - name: 生成完成通知
      ansible.builtin.debug:
        msg: "系统检查报告已生成至 {{ report_path }}"
      when: "'all' not in tags"

    - name: 生成汇总报告
      ansible.builtin.template:
        src: full_report.j2
        dest: "{{ report_path }}"
      when: "'all' in tags"
      tags: all